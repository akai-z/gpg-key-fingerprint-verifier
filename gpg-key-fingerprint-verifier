#!/bin/sh

set -e

readonly GPG_REQUIRED_VERSION=2
readonly GPG_KEY_IMPORT_FILE_MAX_KEYS=1
readonly GPG_KEY_FINGERPRINT_LENGTH=40
readonly GPG_KEY_LISTING_PUBLIC_KEY_FIELD="pub:"
readonly GPG_VERSION_IDENTIFIER="gpg (GnuPG)"
readonly REQUIRED_DEPS="
gpg
"

GPG_KEY_IMPORT_FILE=""
GPG_KEY_FINGERPRINT=""
GPG_SUBKEY_FINGERPRINT=""
GPG_KEY_LIST_PRINT=0
QUIET=0

gpg_key_verification() {
  local gpg_key="$(gpg_key_list)"
  local gpg_keys_count="$(gpg_keys_count "$gpg_key")"

  if [ "$gpg_keys_count" -ne "$GPG_KEY_IMPORT_FILE_MAX_KEYS" ]; then
    verification_result_error # Malicious key.
  fi

  if [ "${#GPG_KEY_FINGERPRINT}" -ne "$GPG_KEY_FINGERPRINT_LENGTH" ] || \
    [ "${#GPG_SUBKEY_FINGERPRINT}" -ne "$GPG_KEY_FINGERPRINT_LENGTH" ]
  then
    verification_result_error # Invalid key fingerprint.
  fi

  gpg_key_fingerprint_find "$gpg_key" "$GPG_KEY_FINGERPRINT" \
    || verification_result_error # Wrong/Malicious key.

  gpg_key_fingerprint_find "$gpg_key" "$GPG_SUBKEY_FINGERPRINT" \
    || verification_result_error # Wrong/Malicious key.

  verification_success
}

gpg_key_list() {
  echo "$( \
    gpg -qn \
      --with-colons \
      --with-subkey-fingerprint \
      --import-options import-show \
      --import "$GPG_KEY_IMPORT_FILE" \
  )"
}

gpg_keys_count() {
  local gpg_key="$1"

  echo "$gpg_key" | grep -c "^${GPG_KEY_LISTING_PUBLIC_KEY_FIELD}"
}

gpg_key_fingerprint_find() {
  local gpg_key="$1"
  local fingerprint="$2"

  echo "$gpg_key" | grep -q "$fingerprint"
}

gpg_home_dir_create() {
  gpg -k > /dev/null 2>&1
}

gpg_key_list_print() {
  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    gpg_key_list
    exit 0
  fi
}

gpg_major_version() {
  echo "$(gpg_version | cut -d "." -f 1)"
}

gpg_version() {
  echo "$( \
    gpg --version \
      | grep -0 "^${GPG_VERSION_IDENTIFIER}" \
      | cut -d " " -f 3 \
  )"
}

deps_check() {
  local dep

  for dep in $REQUIRED_DEPS
  do
    if [ ! -x "$(command -v "$dep")" ]; then
      error "$(printf "\"%s\" not found." "$dep")"
    fi
  done
}

gpg_version_check() {
  local gpg_version="$(gpg_major_version)"

  if [ "$gpg_version" -lt "$GPG_REQUIRED_VERSION" ]; then
    error "Only GPG v2 and higher are supported."
  fi
}

args_validation() {
  if [ -z "$GPG_KEY_IMPORT_FILE" ]; then
    error "GPG key import file path is missing."
  fi

  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    return 0
  fi

  if [ -z "$GPG_KEY_FINGERPRINT" ]; then
    error "GPG key fingerprint is missing."
  fi

  if [ -z "$GPG_SUBKEY_FINGERPRINT" ]; then
    error "GPG subkey fingerprint is missing."
  fi
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --gpg-key-import-file=*)      GPG_KEY_IMPORT_FILE="${i#*=}";;
      --gpg-key-fingerprint=*)      GPG_KEY_FINGERPRINT="${i#*=}";;
      --gpg-subkey-fingerprint=*)   GPG_SUBKEY_FINGERPRINT="${i#*=}";;
      --print-gpg-key-list)         GPG_KEY_LIST_PRINT=1;;
      -q|--quiet)                   QUIET=1;;
      *)                            usage;;
    esac
  done
}

usage() {
  cat <<Usage
usage: gpg-key-fingerprint-verifier \\
         --gpg-key-import-file=<gpg-key-import-file> \\
         --gpg-key-fingerprint=<gpg-key-fingerprint> \\
         --gpg-subkey-fingerprint=<gpg-subkey-fingerprint> \\
         [--print-gpg-key-list] \\
         [-q|--quiet]

  --gpg-key-import-file
      GPG key import file path.

  --gpg-key-fingerprint
      A ${GPG_KEY_FINGERPRINT_LENGTH} characters, with no spaces, GPG key fingerprint. (Not used/required if --print-gpg-key-list is used.)

  --gpg-subkey-fingerprint
      A ${GPG_KEY_FINGERPRINT_LENGTH} characters, with no spaces, GPG subkey fingerprint. (Not used/required if --print-gpg-key-list is used.)

  --print-gpg-key-list
      Prints machine-parseable GPG key listing of the provided GPG key import file. (Optional)

  -q, --quiet
      Suppresses verification success message. (Optional)
Usage

  exit 0
}

verification_success() {
  if [ "$QUIET" -ne 1 ]; then
    echo -e "\nValid GPG key.\n"
  fi

  exit 0
}

verification_result_error() {
  error "Invalid GPG key."
}

error() {
  echo -e >&2 "\n$1\n"
  exit 1
}

main() {
  deps_check
  gpg_version_check
  read_args "$@"
  args_validation
  gpg_home_dir_create
  gpg_key_list_print
  gpg_key_verification
}

main "$@"
