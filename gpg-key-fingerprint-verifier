#!/bin/sh

set -e

readonly GPGKEY_FINGERPRINT_LENGTH=40
readonly GPGKEY_PUB_LABEL="pub:-:"
readonly VERSION_LABEL="gpg"
readonly REQUIRED_VERSION="2"
readonly GPG_DIR="/root/.gnupg"
readonly REQUIRED_DEPS="
gpg
"

GPGKEY_FILE=""
GPGKEY_FINGERPRINT=""
GPG_SUBKEY_FINGERPRINT=""

gpg_dir_create() {
  if [ ! -d "$GPG_DIR" ]; then
    mkdir "$GPG_DIR"
    chmod 700 "$GPG_DIR"
  fi
}

gpgkey_verification() {
  local gpgkey="$(gpgkey)"
  local gpgkeys_count="$(gpgkeys_count "$gpgkey")"

  if [ "$gpgkeys_count" -ne 1 ]; then
    exit 1 # Malicious key.
  fi

  if [ "${#GPGKEY_FINGERPRINT}" -ne "$GPGKEY_FINGERPRINT_LENGTH" ] || \
    [ "${#GPG_SUBKEY_FINGERPRINT}" -ne "$GPGKEY_FINGERPRINT_LENGTH" ]
  then
    exit 1 # Invalid key fingerprint.
  fi

  gpgkey_fingerprint_find "$gpgkey" "$GPGKEY_FINGERPRINT" \
    || exit 1 # Wrong/Malicious key.

  gpgkey_fingerprint_find "$gpgkey" "$GPG_SUBKEY_FINGERPRINT" \
    || exit 1 # Wrong/Malicious key.

  exit 0
}

gpgkey() {
  echo "$( \
    gpg -q \
      --dry-run \
      --with-colons \
      --with-subkey-fingerprint \
      --import-options import-show \
      --import "$GPGKEY_FILE" \
  )"
}

gpgkeys_count() {
  local gpgkey="$1"

  echo "$gpgkey" | grep -c "^${GPGKEY_PUB_LABEL}"
}

gpgkey_fingerprint_find() {
  local gpgkey="$1"
  local fingerprint="$2"

  echo "$gpgkey" | grep -q "$fingerprint"
}

gpg_major_version() {
  echo "$(gpg_version | cut -d "." -f 1)"
}

gpg_version() {
  echo "$( \
    gpg --version \
      | grep -0 "^${VERSION_LABEL}" \
      | cut -d " " -f 3 \
  )"
}

deps_check() {
  local dep

  for dep in $REQUIRED_DEPS
  do
    if [ ! -x "$(command -v "$dep")" ]; then
      error "$(printf "\"%s\" not found." "$dep")"
    fi
  done
}

gpg_version_check() {
  local gpg_version="$(gpg_major_version)"

  if [ "$gpg_version" -lt "$REQUIRED_VERSION" ]
    error "Only GPG v2 or higher are supported."
  fi
}

args_validation() {
  if [ -z "$GPGKEY_FILE" ]; then
    error "GPG key file patch is missing."
  fi

  if [ -z "$GPGKEY_FINGERPRINT" ]; then
    error "GPG key fingerprint is missing."
  fi

  if [ -z "$GPG_SUBKEY_FINGERPRINT" ]; then
    error "GPG subkey fingerprint is missing."
  fi
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --gpgkey-file=*)              GPGKEY_FILE="${i#*=}";;
      --gpgkey-fingerprint=*)       GPGKEY_FINGERPRINT="${i#*=}";;
      --gpg-subkey-fingerprint=*)   GPG_SUBKEY_FINGERPRINT="${i#*=}";;
      *)                            usage;;
    esac
  done
}

usage() {
  cat <<Usage
usage: gpg-key-fingerprint-verifier \\
         --gpgkey-file=<gpgkey-file> \\
         --gpgkey-fingerprint=<gpgkey-fingerprint> \\
         --gpg-subkey-fingerprint=<gpg-subkey-fingerprint>

  --gpgkey-file
      GPG key file path.

  --gpgkey-fingerprint
      GPG key fingerprint.

  --gpg-subkey-fingerprint
      GPG subkey fingerprint.
Usage

  exit 0
}

error() {
  echo -e >&2 "\n$1\n"
  exit 1
}

main() {
  deps_check
  gpg_version_check
  read_args "$@"
  args_validation
  gpg_dir_create
  gpgkey_verification
}

main "$@"
