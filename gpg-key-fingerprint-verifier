#!/bin/sh

set -e

readonly GPGKEY_FINGERPRINT_LENGTH=40
readonly GPGKEY_PUB_LABEL="pub:-:"
readonly VERSION_LABEL="gpg"
readonly REQUIRED_VERSION="2"
readonly REQUIRED_DEPS="
gpg
"

GPGKEY_FILE=""
GPGKEY_FINGERPRINT=""
GPG_SUBKEY_FINGERPRINT=""
GPG_KEY_PRINT=0
QUIET=0

gpgkey_verification() {
  local gpgkey="$(gpgkey)"
  local gpgkeys_count="$(gpgkeys_count "$gpgkey")"

  if [ "$gpgkeys_count" -ne 1 ]; then
    verification_result_error # Malicious key.
  fi

  if [ "${#GPGKEY_FINGERPRINT}" -ne "$GPGKEY_FINGERPRINT_LENGTH" ] || \
    [ "${#GPG_SUBKEY_FINGERPRINT}" -ne "$GPGKEY_FINGERPRINT_LENGTH" ]
  then
    verification_result_error # Invalid key fingerprint.
  fi

  gpgkey_fingerprint_find "$gpgkey" "$GPGKEY_FINGERPRINT" \
    || verification_result_error # Wrong/Malicious key.

  gpgkey_fingerprint_find "$gpgkey" "$GPG_SUBKEY_FINGERPRINT" \
    || verification_result_error # Wrong/Malicious key.

  verification_success
}

gpgkey() {
  local with_colons="$1"
  local colons="--with-colons"

  if [ ! -z "$with_colons" ] && [ "$with_colons" -eq 0 ]; then
    colons=""
  fi

  echo "$( \
    gpg -qn \
      $colons \
      --with-subkey-fingerprint \
      --import-options import-show \
      --import "$GPGKEY_FILE" \
  )"
}

gpgkeys_count() {
  local gpgkey="$1"

  echo "$gpgkey" | grep -c "^${GPGKEY_PUB_LABEL}"
}

gpgkey_fingerprint_find() {
  local gpgkey="$1"
  local fingerprint="$2"

  echo "$gpgkey" | grep -q "$fingerprint"
}

gpg_home_dir_create() {
  gpg -k > /dev/null 2>&1
}

gpgkey_print() {
  if [ "$GPG_KEY_PRINT" -eq 1 ]; then
    gpgkey 0
    exit 0
  fi
}

gpg_major_version() {
  echo "$(gpg_version | cut -d "." -f 1)"
}

gpg_version() {
  echo "$( \
    gpg --version \
      | grep -0 "^${VERSION_LABEL}" \
      | cut -d " " -f 3 \
  )"
}

deps_check() {
  local dep

  for dep in $REQUIRED_DEPS
  do
    if [ ! -x "$(command -v "$dep")" ]; then
      error "$(printf "\"%s\" not found." "$dep")"
    fi
  done
}

gpg_version_check() {
  local gpg_version="$(gpg_major_version)"

  if [ "$gpg_version" -lt "$REQUIRED_VERSION" ]; then
    error "Only GPG v2 and higher are supported."
  fi
}

args_validation() {
  if [ -z "$GPGKEY_FILE" ]; then
    error "GPG key file path is missing."
  fi

  if [ "$GPG_KEY_PRINT" -eq 1 ]; then
    return 0
  fi

  if [ -z "$GPGKEY_FINGERPRINT" ]; then
    error "GPG key fingerprint is missing."
  fi

  if [ -z "$GPG_SUBKEY_FINGERPRINT" ]; then
    error "GPG subkey fingerprint is missing."
  fi
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --gpgkey-file=*)              GPGKEY_FILE="${i#*=}";;
      --gpgkey-fingerprint=*)       GPGKEY_FINGERPRINT="${i#*=}";;
      --gpg-subkey-fingerprint=*)   GPG_SUBKEY_FINGERPRINT="${i#*=}";;
      --print-gpg-key)              GPG_KEY_PRINT=1;;
      -q|--quiet)                   QUIET=1;;
      *)                            usage;;
    esac
  done
}

usage() {
  cat <<Usage
usage: gpg-key-fingerprint-verifier \\
         --gpgkey-file=<gpgkey-file> \\
         --gpgkey-fingerprint=<gpgkey-fingerprint> \\
         --gpg-subkey-fingerprint=<gpg-subkey-fingerprint> \\
         [--print-gpg-key=<print-gpg-key>] \\
         [-q|--quiet]

  --gpgkey-file
      GPG key file path.

  --gpgkey-fingerprint
      GPG key fingerprint.

  --gpg-subkey-fingerprint
      GPG subkey fingerprint.

  --print-gpg-key
      Prints GPG key of the provided GPG file.

  -q, --quiet
      Suppresses verification result message.
Usage

  exit 0
}

verification_success() {
  if [ "$QUIET" -ne 1 ]; then
    echo -e "\nValid GPG key.\n"
  fi

  exit 0
}

verification_result_error() {
  error "Invalid GPG key." $QUIET
}

error() {
  local suppress_message="$2"

  if [ -z "$suppress_message" ] || [ "$suppress_message" -ne 1 ]; then
    echo -e >&2 "\n$1\n"
  fi

  exit 1
}

main() {
  deps_check
  gpg_version_check
  read_args "$@"
  args_validation
  gpg_home_dir_create
  gpgkey_print
  gpgkey_verification
}

main "$@"
