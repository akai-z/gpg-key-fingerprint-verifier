#!/bin/sh

set -e

readonly GPG_KEY_IMPORT_FILE_MAX_KEYS=1
readonly GPG_KEY_FINGERPRINT_LENGTH=40
readonly GPG_KEY_LISTING_PUBLIC_KEY_RECORD_TYPE="pub"
readonly GPG_KEY_LISTING_SUBKEY_RECORD_TYPE="sub"
readonly GPG_KEY_LISTING_FINGERPRINT_RECORD_TYPE="fpr"
readonly REQUIRED_DEPS="
gpg
"

GPG_KEY_IMPORT_FILE=""
GPG_PUBLIC_KEY_FINGERPRINT=""
GPG_SUBKEY_FINGERPRINT=""
GPG_KEY_LIST_PRINT=0
QUIET=0

gpg_key_verification() {
  local gpg_key_list="$(gpg_key_list)"
  local gpg_keys_count="$(gpg_keys_count "$gpg_key_list")"

  if [ "$gpg_keys_count" -ne "$GPG_KEY_IMPORT_FILE_MAX_KEYS" ]; then
    verification_result_error # Malicious key.
  fi

  if [ "${#GPG_PUBLIC_KEY_FINGERPRINT}" -ne "$GPG_KEY_FINGERPRINT_LENGTH" ]; then
    verification_result_error # Invalid key fingerprint.
  fi

  if [ ! -z "$GPG_SUBKEY_FINGERPRINT" ] && \
     [ "${#GPG_SUBKEY_FINGERPRINT}" -ne "$GPG_KEY_FINGERPRINT_LENGTH" ]
  then
    verification_result_error # Invalid subkey fingerprint.
  fi

  gpg_key_fingerprint_find "$gpg_key_list" "$GPG_PUBLIC_KEY_FINGERPRINT" \
    "$GPG_KEY_LISTING_PUBLIC_KEY_RECORD_TYPE" \
    || verification_result_error # Wrong/Malicious key.

  if [ ! -z "$GPG_SUBKEY_FINGERPRINT" ]; then
    gpg_key_fingerprint_find "$gpg_key_list" "$GPG_SUBKEY_FINGERPRINT" \
      "$GPG_KEY_LISTING_SUBKEY_RECORD_TYPE" \
      || verification_result_error # Wrong/Malicious key.
  fi

  verification_success
}

gpg_key_list() {
  echo "$( \
    gpg -qn \
      --with-colons \
      --with-fingerprint \
      --with-fingerprint \
      --fixed-list-mode \
      "$GPG_KEY_IMPORT_FILE" \
  )"
}

gpg_keys_count() {
  local gpg_key_list="$1"

  echo "$gpg_key_list" | grep -c "^${GPG_KEY_LISTING_PUBLIC_KEY_RECORD_TYPE}:"
}

gpg_key_list_record_line_numbers() {
  local gpg_key_list="$1"
  local record_type="$2"

  echo "$gpg_key_list" | grep -on "^${record_type}:" | cut -d ':' -f 1
}

gpg_key_list_fingerprint_record_line_number() {
  local fingerprint_record_line_number="$1"

  expr $fingerprint_record_line_number + 1
}

gpg_key_fingerprint_find() {
  local gpg_key_list="$1"
  local fingerprint="$2"
  local key_record_type="$3"
  local fingerprint_record_type="$GPG_KEY_LISTING_FINGERPRINT_RECORD_TYPE"
  local key_records_line_numbers
  local key_record_line_number
  local fingerprint_record_line_number
  local result

  key_records_line_numbers="$( \
    gpg_key_list_record_line_numbers "$gpg_key_list" "$key_record_type" \
  )"

  for key_record_line_number in $key_records_line_numbers
  do
    fingerprint_record_line_number="$( \
      gpg_key_list_fingerprint_record_line_number "$key_record_line_number" \
    )"

    result="$( \
      echo "$gpg_key_list" \
        | head -"$fingerprint_record_line_number" \
        | tail -1 \
        | grep -E "^${fingerprint_record_type}:.*:${fingerprint}:" \
        || echo "1" \
    )"

    if [ "$result" != "1" ]; then
      return 0
    fi
  done

  return 1
}

gpg_home_dir_create() {
  gpg -k > /dev/null 2>&1
}

gpg_key_list_print() {
  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    gpg_key_list
    exit 0
  fi
}

deps_check() {
  local dep

  for dep in $REQUIRED_DEPS
  do
    if [ ! -x "$(command -v "$dep")" ]; then
      error "$(printf "\"%s\" not found." "$dep")"
    fi
  done
}

args_validation() {
  if [ -z "$GPG_KEY_IMPORT_FILE" ]; then
    error "GPG key import file path is missing."
  fi

  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    return 0
  fi

  if [ -z "$GPG_PUBLIC_KEY_FINGERPRINT" ]; then
    error "GPG public key fingerprint is missing."
  fi
}

read_args() {
  local i

  if [ $# -eq 0 ]; then
    usage
  fi

  for i in "$@"
  do
    case $i in
      --gpg-key-import-file=*)          GPG_KEY_IMPORT_FILE="${i#*=}";;
      --print-gpg-key-list)             GPG_KEY_LIST_PRINT=1;;
      --gpg-public-key-fingerprint=*)   GPG_PUBLIC_KEY_FINGERPRINT="${i#*=}";;
      --gpg-public-key-fingerprint)     read_gpg_public_key_fingerprint;;
      --gpg-subkey-fingerprint=*)       GPG_SUBKEY_FINGERPRINT="${i#*=}";;
      --gpg-subkey-fingerprint)         read_gpg_subkey_fingerprint;;
      -q|--quiet)                       QUIET=1;;
      *)                                usage;;
    esac
  done
}

read_gpg_public_key_fingerprint() {
  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    return 0
  fi

  while [ -z "$GPG_PUBLIC_KEY_FINGERPRINT" ]; do
    read -s -p "Enter GPG Public Key Fingerprint: " GPG_PUBLIC_KEY_FINGERPRINT
    printf "\n"
  done
}

read_gpg_subkey_fingerprint() {
  if [ "$GPG_KEY_LIST_PRINT" -eq 1 ]; then
    return 0
  fi

  while [ -z "$GPG_SUBKEY_FINGERPRINT" ]; do
    read -s -p "Enter GPG Subkey Fingerprint: " GPG_SUBKEY_FINGERPRINT
    printf "\n"
  done
}

usage() {
  cat <<Usage
usage: gpg-key-fingerprint-verifier \\
         --gpg-key-import-file=<gpg-key-import-file> \\
         --gpg-public-key-fingerprint Or --gpg-public-key-fingerprint=<gpg-public-key-fingerprint> \\
         --gpg-subkey-fingerprint Or --gpg-subkey-fingerprint=<gpg-subkey-fingerprint> \\
         [--print-gpg-key-list] \\
         [-q | --quiet]

  --gpg-key-import-file
      GPG key import file path.

  --gpg-public-key-fingerprint
      A ${GPG_KEY_FINGERPRINT_LENGTH} characters, without spaces, GPG public key fingerprint. (This will be ignored if --print-gpg-key-list is used.)
      The fingerprint can be prompted for user input in a shell if it's a flag (--gpg-public-key-fingerprint) without a value.
      Or it can be provided through the command as an argument with a value (--gpg-public-key-fingerprint=<gpg-public-key-fingerprint>).

  --gpg-subkey-fingerprint
      A ${GPG_KEY_FINGERPRINT_LENGTH} characters, without spaces, GPG subkey fingerprint. (This will be ignored if --print-gpg-key-list is used.)
      This should be the default subkey (with record type "sub") in the GPG key listing. (But other subkeys could be used.)
      Verifying GPG subkey fingerprint is optional, but recommended.
      The fingerprint can be prompted for user input in a shell if it's a flag (--gpg-subkey-fingerprint) without a value.
      Or it can be provided through the command as an argument with a value (--gpg-subkey-fingerprint=<gpg-subkey-fingerprint>).

  --print-gpg-key-list
      Prints machine-parseable GPG key listing of the provided GPG key import file. (Optional)

  -q, --quiet
      Suppresses verification success message. (Optional)
Usage

  exit 0
}

verification_success() {
  if [ "$QUIET" -ne 1 ]; then
    echo -e "\nValid GPG key.\n"
  fi

  exit 0
}

verification_result_error() {
  error "Invalid GPG key."
}

error() {
  echo -e >&2 "\n$1\n"
  exit 1
}

main() {
  deps_check
  read_args "$@"
  args_validation
  gpg_home_dir_create
  gpg_key_list_print
  gpg_key_verification
}

main "$@"
